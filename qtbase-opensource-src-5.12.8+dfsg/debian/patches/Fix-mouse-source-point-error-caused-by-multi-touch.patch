Description: Fix-mouse-source-point-error-caused-by-multi-touch.patch
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 qtbase-opensource-src (5.12.8+dfsg-0kylin1k5) v101; urgency=medium
 .
   * BUG号：无；
   * 需求号：无
   * 其他改动：解决多点触控下，由qt模拟发出的鼠标事件无法正确释放问题
     - debian/patches/Fix-mouse-source-point-error-caused-by-multi-touch.patch
Author: chechen <chechen@kylinos.cn>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2021-09-01

--- qtbase-opensource-src-5.12.8+dfsg.orig/src/gui/kernel/qguiapplication.cpp
+++ qtbase-opensource-src-5.12.8+dfsg/src/gui/kernel/qguiapplication.cpp
@@ -192,7 +192,7 @@ static bool force_reverse = false;
 
 QGuiApplicationPrivate *QGuiApplicationPrivate::self = 0;
 QTouchDevice *QGuiApplicationPrivate::m_fakeTouchDevice = 0;
-int QGuiApplicationPrivate::m_fakeMouseSourcePointId = 0;
+int QGuiApplicationPrivate::m_fakeMouseSourcePointId = -1;
 
 #ifndef QT_NO_CLIPBOARD
 QClipboard *QGuiApplicationPrivate::qt_clipboard = 0;
@@ -2877,32 +2877,32 @@ void QGuiApplicationPrivate::processTouc
         if (!e->synthetic() && !touchEvent.isAccepted() && qApp->testAttribute(Qt::AA_SynthesizeMouseForUnhandledTouchEvents)) {
             // exclude devices which generate their own mouse events
             if (!(touchEvent.device()->capabilities() & QTouchDevice::MouseEmulation)) {
-
-                if (eventType == QEvent::TouchEnd)
-                    self->synthesizedMousePoints.clear();
-
                 const QList<QTouchEvent::TouchPoint> &touchPoints = touchEvent.touchPoints();
-                if (eventType == QEvent::TouchBegin)
+                QEvent::Type mouseEventType = QEvent::MouseMove;
+                Qt::MouseButton button = Qt::NoButton;
+                Qt::MouseButtons buttons = Qt::LeftButton;
+                if (eventType == QEvent::TouchBegin && m_fakeMouseSourcePointId < 0)
                     m_fakeMouseSourcePointId = touchPoints.first().id();
-
-                const QEvent::Type mouseType = [&]() {
-                    switch (eventType) {
-                    case QEvent::TouchBegin:  return QEvent::MouseButtonPress;
-                    case QEvent::TouchUpdate: return QEvent::MouseMove;
-                    case QEvent::TouchEnd:    return QEvent::MouseButtonRelease;
-                    default: Q_UNREACHABLE();
-                    }
-                }();
-
-                Qt::MouseButton button = mouseType == QEvent::MouseMove ? Qt::NoButton : Qt::LeftButton;
-                Qt::MouseButtons buttons = mouseType == QEvent::MouseButtonRelease ? Qt::NoButton : Qt::LeftButton;
-
-                for (int i = 0; i < touchPoints.count(); ++i) {
-                    const QTouchEvent::TouchPoint &touchPoint = touchPoints.at(i);
+                for (const auto &touchPoint : touchPoints) {
                     if (touchPoint.id() == m_fakeMouseSourcePointId) {
-                        if (eventType != QEvent::TouchEnd)
+                        switch (touchPoint.state()) {
+                        case Qt::TouchPointPressed:
+                            mouseEventType = QEvent::MouseButtonPress;
+                            button = Qt::LeftButton;
+                            break;
+                        case Qt::TouchPointReleased:
+                            mouseEventType = QEvent::MouseButtonRelease;
+                            button = Qt::LeftButton;
+                            buttons = Qt::NoButton;
+                            m_fakeMouseSourcePointId = -1;
+                            break;
+                        default:
+                            break;
+                        }
+                        if (touchPoint.state() != Qt::TouchPointReleased) {
                             self->synthesizedMousePoints.insert(w, SynthesizedMouseData(
                                                                     touchPoint.pos(), touchPoint.screenPos(), w));
+                        }
                         // All touch events that are not accepted by the application will be translated to
                         // left mouse button events instead (see AA_SynthesizeMouseForUnhandledTouchEvents docs).
                         QWindowSystemInterfacePrivate::MouseEvent fake(w, e->timestamp,
@@ -2911,13 +2911,15 @@ void QGuiApplicationPrivate::processTouc
                                                                        buttons,
                                                                        e->modifiers,
                                                                        button,
-                                                                       mouseType,
+                                                                       mouseEventType,
                                                                        Qt::MouseEventSynthesizedByQt);
                         fake.flags |= QWindowSystemInterfacePrivate::WindowSystemEvent::Synthetic;
                         processMouseEvent(&fake);
                         break;
                     }
                 }
+                if (eventType == QEvent::TouchEnd)
+                    self->synthesizedMousePoints.clear();
             }
         }
     }
